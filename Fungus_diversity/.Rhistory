theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear un data frame
shannon_data <- data.frame(
sample_id = rownames(alpha),  # Asegúrate de tener la tabla como data frame
shannon_entropy = alpha$shannon_entropy
)
# Graficar
ggplot(shannon_data, aes(x = sample_id, y = shannon_entropy)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Índice de Shannon por Muestra", x = "Muestra", y = "Índice de Shannon") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(tidyverse)
alpha <- read.csv('~/Downloads/alpha-diversity.tsv')
# Crear un data frame
shannon_data <- data.frame(
sample_id = rownames(alpha),  # Asegúrate de tener la tabla como data frame
shannon_entropy = alpha$shannon_entropy
)
shannon_data
alpha <- read_tsv('~/Downloads/alpha-diversity.tsv')
# Crear un data frame
shannon_data <- data.frame(
sample_id = rownames(alpha),  # Asegúrate de tener la tabla como data frame
shannon_entropy = alpha$shannon_entropy
)
shannon_data
alpha
alpha <- read_tsv('~/Downloads/alpha-diversity.tsv',col_names = T)
alpha
rownames(alpha) <- alpha$...1
alpha
rownames(alpha)
rownames(alpha) <- alpha$...1
alpha <- read_tsv('~/Downloads/alpha-diversity.tsv',col_names = T) %>% as.data.frame()
rownames(alpha) <- alpha$...1
rownames(alpha) <- alpha$...1
# Crear un data frame
shannon_data <- data.frame(
sample_id = rownames(alpha),  # Asegúrate de tener la tabla como data frame
shannon_entropy = alpha$shannon_entropy
)
shannon_data
# Graficar
ggplot(shannon_data, aes(x = sample_id, y = shannon_entropy)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Índice de Shannon por Muestra", x = "Muestra", y = "Índice de Shannon") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Graficar
ggplot(shannon_data, aes(x = sample_id, y = shannon_entropy)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Shannon index per sample", x = "Sample", y = "Shannon index") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
read.table('~/Downloads/ordination.txt')
read.table('~/Downloads/ordination.txt',header = T)
read.table('~/Downloads/ordination.txt')
# Cargar el archivo
ordination_data <- read.table("~/Downloads/ordination.txt", header = TRUE, sep = "\t")
# Cargar el archivo
ordination_data <- read.table("~/Downloads/ordination.txt", header = F, sep = "\t")
ordination_data_preview <- readLines("~/Downloads/ordination.txt", n = 10)
print(ordination_data_preview)
# Extraer la sección de Eigenvalores
eigvals_start <- grep("Eigvals", ordination_data) + 1
ordination_data <- readLines("~/Downloads/ordination.txt", n = 10)
# Extraer la sección de Eigenvalores
eigvals_start <- grep("Eigvals", ordination_data) + 1
eigvals_end <- eigvals_start + 1
eigvals <- as.numeric(unlist(strsplit(ordination_data[eigvals_start:eigvals_end], "\t")))
# Extraer la sección de Proportion explained
proportion_start <- grep("Proportion explained", ordination_data) + 1
proportion_end <- proportion_start + 1
proportion_explained <- as.numeric(unlist(strsplit(ordination_data[proportion_start:proportion_end], "\t")))
# Extraer la sección de coordenadas (Site)
site_start <- grep("Site", ordination_data) + 1
site_data <- ordination_data[site_start:length(ordination_data)]
site_matrix <- do.call(rbind, lapply(site_data, function(x) as.numeric(unlist(strsplit(x, "\t")))))
# Usar los eigenvalores para análisis (ya extraídos)
pcoa_results <- list(
eigvals = eigvals,
proportion_explained = proportion_explained,
coordinates = site_matrix
)
# Verificar las coordenadas y los eigenvalores
print(pcoa_results$coordinates)
print(pcoa_results$eigvals)
# Asegúrate de tener las coordenadas y eigenvalores
coordinates <- as.data.frame(pcoa_results$coordinates)
colnames(coordinates) <- c("PCoA1", "PCoA2")  # Nombra los ejes
eigvals <- pcoa_results$eigvals
proportion_explained <- pcoa_results$proportion_explained
# Crear la gráfica en ggplot2
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, label = Sample)) +
geom_point(color = "blue", size = 3) +  # Puntos
geom_text(vjust = 1.5, hjust = 1.5) +  # Etiquetas de las muestras
labs(
title = "PCoA Plot",
x = paste0("PCoA1 (", pc1_var, "%)"),  # Etiqueta con varianza explicada
y = paste0("PCoA2 (", pc2_var, "%)")
) +
theme_minimal()
# Crear el dataframe con las coordenadas
pcoa_df <- data.frame(
Sample = rownames(coordinates),  # Si tienes nombres para las muestras
PCoA1 = coordinates$PCoA1,
PCoA2 = coordinates$PCoA2
)
# Proporciones explicadas para los ejes
pc1_var <- round(proportion_explained[1] * 100, 2)
pc2_var <- round(proportion_explained[2] * 100, 2)
# Crear la gráfica en ggplot2
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, label = Sample)) +
geom_point(color = "blue", size = 3) +  # Puntos
geom_text(vjust = 1.5, hjust = 1.5) +  # Etiquetas de las muestras
labs(
title = "PCoA Plot",
x = paste0("PCoA1 (", pc1_var, "%)"),  # Etiqueta con varianza explicada
y = paste0("PCoA2 (", pc2_var, "%)")
) +
theme_minimal()
ordination_data <- readLines("~/Downloads/ordination.txt", n = 10)
# Extraer la sección de Eigenvalores
eigvals_start <- grep("Eigvals", ordination_data) + 1
eigvals_start
ordination_data
# Extraer la sección de Eigenvalores
eigvals_start <- grep("Eigvals", ordination_data) + 1
eigvals_end <- eigvals_start + 1
eigvals <- as.numeric(unlist(strsplit(ordination_data[eigvals_start:eigvals_end], "\t")))
eigvals
# Extraer la sección de Proportion explained
proportion_start <- grep("Proportion explained", ordination_data) + 1
proportion_end <- proportion_start + 1
proportion_explained <- as.numeric(unlist(strsplit(ordination_data[proportion_start:proportion_end], "\t")))
proportion_explained
# Extraer la sección de coordenadas (Site)
site_start <- grep("Site", ordination_data) + 1
site_data <- ordination_data[site_start:length(ordination_data)]
site_matrix <- do.call(rbind, lapply(site_data, function(x) as.numeric(unlist(strsplit(x, "\t")))))
site_start
site_data
site_matrix <- do.call(rbind, lapply(site_data, function(x) as.numeric(unlist(strsplit(x, "\t")))))
# Separar los nombres de las muestras y las coordenadas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "\t")[[1]]
sample_name <- parts[1]  # Nombre de la muestra
coords <- as.numeric(parts[-1])  # Coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
})
print(head(site_matrix))
print(sample_names)
# Extraer los nombres de las muestras en un vector
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
print(head(site_matrix))
print(sample_names)
sample_names
site_data_clean
site_data_clean
# Separar los nombres de las muestras y las coordenadas numéricas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "\t")[[1]]  # Dividir cada fila por tabulaciones
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
})
site_data_clean
# Usar los eigenvalores para análisis (ya extraídos)
pcoa_results <- list(
eigvals = eigvals,
proportion_explained = proportion_explained,
coordinates = site_matrix
)
# Verificar las coordenadas y los eigenvalores
print(pcoa_results$coordinates)
print(pcoa_results$eigvals)
# Asegúrate de tener las coordenadas y eigenvalores
coordinates <- as.data.frame(pcoa_results$coordinates)
colnames(coordinates) <- c("PCoA1", "PCoA2")  # Nombra los ejes
eigvals <- pcoa_results$eigvals
proportion_explained <- pcoa_results$proportion_explained
# Crear el dataframe con las coordenadas
pcoa_df <- data.frame(
Sample = rownames(coordinates),  # Si tienes nombres para las muestras
PCoA1 = coordinates$PCoA1,
PCoA2 = coordinates$PCoA2
)
# Proporciones explicadas para los ejes
pc1_var <- round(proportion_explained[1] * 100, 2)
pc2_var <- round(proportion_explained[2] * 100, 2)
# Crear la gráfica en ggplot2
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, label = Sample)) +
geom_point(color = "blue", size = 3) +  # Puntos
geom_text(vjust = 1.5, hjust = 1.5) +  # Etiquetas de las muestras
labs(
title = "PCoA Plot",
x = paste0("PCoA1 (", pc1_var, "%)"),  # Etiqueta con varianza explicada
y = paste0("PCoA2 (", pc2_var, "%)")
) +
theme_minimal()
print(head(site_matrix))
print(sample_names)
# Separar los nombres de las muestras y las coordenadas numéricas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "\t")[[1]]  # Dividir cada fila por tabulaciones
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar posibles elementos NULL
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verifica los nombres de las muestras
print(sample_names)
# Verifica la matriz de coordenadas
print(head(site_matrix))
# Verifica los nombres de las muestras
print(sample_names)
site_start
grep("Site", ordination_data) + 1
ordination_data
# Extraer los datos de las coordenadas del archivo
site_data_clean <- lapply(site_data, function(x) {
# Dividir cada fila por tabulaciones
parts <- strsplit(x, "\t")[[1]]
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras en un vector
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
print(head(site_matrix))  # Las primeras coordenadas
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
# Verificar el número de líneas en site_data
length(site_data)
# Verificar las primeras 10 líneas de site_data
head(site_data, 10)
# Separar los nombres de las muestras y las coordenadas numéricas
site_data_clean <- lapply(site_data, function(x) {
# Dividir cada fila por cualquier cantidad de espacios o tabulaciones
parts <- strsplit(x, "[\t]+")[[1]]
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
print(head(site_matrix))  # Las primeras coordenadas
# Verificar cuántas líneas hay en site_data
print(length(site_data))  # Deberías ver el número total de líneas
# Leer el archivo completo
ordination_data <- readLines("~/Downloads/ordination.txt")  # Cambia la ruta si es necesario
# Verificar cuántas líneas tiene el archivo
print(length(ordination_data))  # Deberías ver el número total de líneas
# Verificar las primeras líneas del archivo
print(head(ordination_data, 10))  # Muestra las primeras 10 líneas
# Separar los nombres de las muestras y las coordenadas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "[\t]+")[[1]]  # Dividir cada fila por tabulaciones
if (length(parts) > 1) {
sample_name <- parts[1]  # Nombre de la muestra
coords <- as.numeric(parts[-1])  # Coordenadas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Nombres de muestras
print(head(site_matrix))  # Coordenadas
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv")
distance_matrix
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap
ggplot(melted_matrix, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(melted_matrix$value), limit = c(min(melted_matrix$value), max(melted_matrix$value)), name="Distance") +
labs(title = "Heatmap of Unweighted UniFrac Distances", x = "Samples", y = "Samples") +
theme_minimal()
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
library(pheatmap)
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-2.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Weighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Bray distance
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-3.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Weighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Bray Curtis Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
## JAccard
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-4.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Bray Curtis Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Jaccard Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
## Taxonomy
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/metadata.tsv.tsv") %>% as.data.frame()
## Taxonomy
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
## Taxonomy
# Leer la matriz de distancias
taxonomy <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
rownames(taxonomy) <- taxonomy$...1
taxonomy$...1 <- NULL
taxonomy
table(taxonomy$Confidence)
summary(taxonomy$Confidence)
summary(taxonomy)
taxonomy$Confidence <- as.integer(taxonomy$Confidence)
summary(taxonomy)
View(taxonomy)
## Taxonomy
# Leer la matriz de distancias
taxonomy <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
rownames(taxonomy) <- taxonomy$...1
taxonomy$...1 <- NULL
View(taxonomy)
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Load libraries
library(tidyverse)
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Load data
fungus_list <- read.csv('Fungus_list.csv',header = T) %>% select(-Details)
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Set working directory:
setwd('~/Documents/CranLab/TAcy/')
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_diversity/')
# Load data
fungus_list <- read.csv('Fungus_list.csv',header = T) %>% select(-Details)
abundance <- read.csv('allsample.all.reabundance.csv', header = T)
fungus_list
abundance <- read.csv('allsample.all.reabundance.csv', header = T)
abundance$Species <- gsub('^.*_(.*)$', '\\1', abundance$Species)
# Which species in the fungus list are present in the abundance table?
fungus_list[(fungus_list$Genus %in% abundance$Species),]
fungus_list[(fungus_list$Species %in% abundance$Species),]
# Which species in the fungus list are present in the abundance table?
fungus_list[(fungus_list$Genus %in% abundance$Genus),]
abundance[abundance$Genus %in% fungus_list$Genus, ]
abundance[abundance$Genus %in% fungus_list$Genus, ] %>% dim
abundance_table <- abundance[abundance$Genus %in% fungus_list$Genus, ]
write.csv(abundance_table, 'abundance_filtered.csv', quote = F, row.names = F)
dim(abundance_table)
View(abundance)
sum(abundance$Species)
sum(abundance$B8.A)
sum(abundance$B8.A)
sum(abundance$B8.B)
0.001348618*100
0.014941857*100
View(abundance)
