eigvals = eigvals,
proportion_explained = proportion_explained,
coordinates = site_matrix
)
# Verificar las coordenadas y los eigenvalores
print(pcoa_results$coordinates)
print(pcoa_results$eigvals)
# Asegúrate de tener las coordenadas y eigenvalores
coordinates <- as.data.frame(pcoa_results$coordinates)
colnames(coordinates) <- c("PCoA1", "PCoA2")  # Nombra los ejes
eigvals <- pcoa_results$eigvals
proportion_explained <- pcoa_results$proportion_explained
# Crear el dataframe con las coordenadas
pcoa_df <- data.frame(
Sample = rownames(coordinates),  # Si tienes nombres para las muestras
PCoA1 = coordinates$PCoA1,
PCoA2 = coordinates$PCoA2
)
# Proporciones explicadas para los ejes
pc1_var <- round(proportion_explained[1] * 100, 2)
pc2_var <- round(proportion_explained[2] * 100, 2)
# Crear la gráfica en ggplot2
ggplot(pcoa_df, aes(x = PCoA1, y = PCoA2, label = Sample)) +
geom_point(color = "blue", size = 3) +  # Puntos
geom_text(vjust = 1.5, hjust = 1.5) +  # Etiquetas de las muestras
labs(
title = "PCoA Plot",
x = paste0("PCoA1 (", pc1_var, "%)"),  # Etiqueta con varianza explicada
y = paste0("PCoA2 (", pc2_var, "%)")
) +
theme_minimal()
print(head(site_matrix))
print(sample_names)
# Separar los nombres de las muestras y las coordenadas numéricas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "\t")[[1]]  # Dividir cada fila por tabulaciones
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar posibles elementos NULL
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verifica los nombres de las muestras
print(sample_names)
# Verifica la matriz de coordenadas
print(head(site_matrix))
# Verifica los nombres de las muestras
print(sample_names)
site_start
grep("Site", ordination_data) + 1
ordination_data
# Extraer los datos de las coordenadas del archivo
site_data_clean <- lapply(site_data, function(x) {
# Dividir cada fila por tabulaciones
parts <- strsplit(x, "\t")[[1]]
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras en un vector
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
print(head(site_matrix))  # Las primeras coordenadas
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
# Verificar el número de líneas en site_data
length(site_data)
# Verificar las primeras 10 líneas de site_data
head(site_data, 10)
# Separar los nombres de las muestras y las coordenadas numéricas
site_data_clean <- lapply(site_data, function(x) {
# Dividir cada fila por cualquier cantidad de espacios o tabulaciones
parts <- strsplit(x, "[\t]+")[[1]]
# Verificar que haya al menos dos elementos (nombre + coordenadas)
if (length(parts) > 1) {
sample_name <- parts[1]  # El primer elemento es el nombre de la muestra
coords <- as.numeric(parts[-1])  # El resto son coordenadas numéricas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Deberías ver todos los nombres de muestras
print(head(site_matrix))  # Las primeras coordenadas
# Verificar cuántas líneas hay en site_data
print(length(site_data))  # Deberías ver el número total de líneas
# Leer el archivo completo
ordination_data <- readLines("~/Downloads/ordination.txt")  # Cambia la ruta si es necesario
# Verificar cuántas líneas tiene el archivo
print(length(ordination_data))  # Deberías ver el número total de líneas
# Verificar las primeras líneas del archivo
print(head(ordination_data, 10))  # Muestra las primeras 10 líneas
# Separar los nombres de las muestras y las coordenadas
site_data_clean <- lapply(site_data, function(x) {
parts <- strsplit(x, "[\t]+")[[1]]  # Dividir cada fila por tabulaciones
if (length(parts) > 1) {
sample_name <- parts[1]  # Nombre de la muestra
coords <- as.numeric(parts[-1])  # Coordenadas
return(list(sample_name = sample_name, coords = coords))
} else {
return(NULL)  # Si la fila no tiene suficiente información, devuelve NULL
}
})
# Filtrar los posibles elementos NULL (filas vacías o incorrectas)
site_data_clean <- Filter(Negate(is.null), site_data_clean)
# Extraer los nombres de las muestras
sample_names <- sapply(site_data_clean, function(x) x$sample_name)
# Extraer solo las coordenadas numéricas y combinarlas en una matriz
site_matrix <- do.call(rbind, lapply(site_data_clean, function(x) x$coords))
# Verificar los resultados
print(sample_names)  # Nombres de muestras
print(head(site_matrix))  # Coordenadas
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv")
distance_matrix
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap
ggplot(melted_matrix, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = median(melted_matrix$value), limit = c(min(melted_matrix$value), max(melted_matrix$value)), name="Distance") +
labs(title = "Heatmap of Unweighted UniFrac Distances", x = "Samples", y = "Samples") +
theme_minimal()
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
library(pheatmap)
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-2.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Unweighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Weighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Bray distance
# Weighted
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-3.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Weighted UniFrac Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Bray Curtis Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
## JAccard
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/distance-matrix-4.tsv") %>% as.data.frame()
rownames(distance_matrix) <- distance_matrix$...1
distance_matrix$...1 <- NULL
# Convertir la matriz a formato largo
melted_matrix <- melt(as.matrix(distance_matrix))
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Bray Curtis Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
# Crear el heatmap con agrupamiento
pheatmap(distance_matrix,
main = "Heatmap of Jaccard Distances with Clustering",
color = colorRampPalette(c("blue", "white", "red"))(50),
clustering_distance_rows = "euclidean",  # Método de distancia para filas
clustering_distance_cols = "euclidean",  # Método de distancia para columnas
clustering_method = "complete",  # Método de agrupamiento
display_numbers = FALSE,  # No mostrar números en las celdas
show_rownames = TRUE,  # Mostrar nombres de filas
show_colnames = TRUE)  # Mostrar nombres de columnas
## Taxonomy
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/metadata.tsv.tsv") %>% as.data.frame()
## Taxonomy
# Leer la matriz de distancias
distance_matrix <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
## Taxonomy
# Leer la matriz de distancias
taxonomy <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
rownames(taxonomy) <- taxonomy$...1
taxonomy$...1 <- NULL
taxonomy
table(taxonomy$Confidence)
summary(taxonomy$Confidence)
summary(taxonomy)
taxonomy$Confidence <- as.integer(taxonomy$Confidence)
summary(taxonomy)
View(taxonomy)
## Taxonomy
# Leer la matriz de distancias
taxonomy <- read_tsv("~/Downloads/metadata.tsv") %>% as.data.frame()
rownames(taxonomy) <- taxonomy$...1
taxonomy$...1 <- NULL
View(taxonomy)
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
fungus_list <- read.csv('Fungus_list.csv',header = T) %>% select(-Details)
# Load libraries
library(tidyverse)
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Set working directory
setwd('~/Documents/GitHub/CranberryLab/Fungus_Biodiversity/')
# Load data
fungus_list <- read.csv('Fungus_list.csv',header = T) %>% select(-Details)
abundance <- read.csv('allsample.all.reabundance.csv', header = T)
abundance$Species <- gsub('^.*_(.*)$', '\\1', abundance$Species)
fungus_list[(fungus_list$Genus %in% abundance$Genus),]
View(fungus_list)
abundance[(abundance$Genus %in% fungus_list$Genus),] %>%
select(Phylum, Class, Order, Family, Genus, Species)
abundance[(abundance$Genus %in% fungus_list$Genus),] %>%
select(Phylum, Class, Order, Family, Genus, Species)
write.csv(temp, 'Genus_present.csv', row.names = F, quote = F)
temp <- abundance[(abundance$Genus %in% fungus_list$Genus),] %>%
select(Phylum, Class, Order, Family, Genus, Species)
write.csv(temp, 'Genus_present.csv', row.names = F, quote = F)
abundance$Species
fungus_list[(fungus_list$Genus %in% abundance$Genus),]
fungus_list[(fungus_list$Species %in% abundance$Species),]
# Set working directoty
setwd('~/Documents/GitHub/CranberryLab/TAcy/')
# Read data
source('tacy_conc.R')
# Read data
data <- read.csv('tacy_data.csv', header = T)
head(data)
# Load libraries
library(tidyverse)
# Keeping only 1st harvest data
data %>%
dplyr::filter(Harvest == '1')
# Keeping only 1st harvest data
data %>%
dplyr::filter(Harvest == '1' & !(Person == 'Ree')) %>%
dplyr::filter()
# Keeping only 1st harvest data
data %>%
dplyr::filter(Harvest == '1' & !(Person == 'Ree'))
# Keeping only 1st harvest data
data <-  data %>%
dplyr::filter(Harvest == '1' & !(Person == 'Ree'))
head(data)
n(data)
n(data, by= 'Red')
n(data, by= 'Rep')
n(data, by= 'Rep')
data %>%
summarise(n = n(), .by = c(Rep, Sample_code, Harvest, pH))
data %>%
summarise(n = n(), .by = c(Rep))
data %>%
summarise(n = n(), .by = c(pH))
data %>%
summarise(n = n(), .by = c(pH, Rep))
data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code))
data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code)) %>% dim()
data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code)) %>%
filter(n > 1)
# Remove duplicated samples
data[duplicated_samples,]
# Remove duplicated samples
data[,duplicated_samples]
# Do we have duplicated data?
duplicated_samples <- data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code)) %>%
filter(n > 1)
# Remove duplicated samples
data[,duplicated_samples]
# Remove duplicated samples
data[duplicated_samples,]
data
# Remove duplicated samples
data[data$Sample_code %in% duplicated_samples$Sample_code,]
# Remove duplicated samples
data <- data[data$Sample_code %in% duplicated_samples$Sample_code,]
# Calculate tacy concentration
tacy_conc(data)
# Load Tacy concentration function
source('tacy_conc.R')
# Calculate tacy concentration
tacy_conc(data)
data <- read.csv('tacy_data.csv', header = T)
# Keeping only 1st harvest data
data <-  data %>%
dplyr::filter(Harvest == '1' & !(Person == 'Ree'))
# Do we have duplicated data?
duplicated_samples <- data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code)) %>%
filter(n > 1)
# Remove duplicated samples
data <- data[!(data$Sample_code %in% duplicated_samples$Sample_code),]
# Load Tacy concentration function
source('tacy_conc.R')
# Calculate tacy concentration
tacy_conc(data)
# Keeping only 1st harvest data
data <-  data %>%
dplyr::filter(Harvest == '1' & !(Person == 'Ree') &
nm_520 > 0 & nm_700 > 0)
# Load Tacy concentration function
source('tacy_conc.R')
# Calculate tacy concentration
tacy_conc(data)
# Read data
data <- read.csv('tacy_data.csv', header = T)
# Filtering data
data <-  data %>%
dplyr::filter( !(Person == 'Ree') & #
nm_520 > 0 &
nm_700 > 0)
# Do we have duplicated data?
duplicated_samples <- data %>%
summarise(n = n(), .by = c(pH, Rep, Sample_code)) %>%
filter(n > 1)
# Remove duplicated samples
data <- data[!(data$Sample_code %in% duplicated_samples$Sample_code),]
# Load Tacy concentration function
source('tacy_conc.R')
# Calculate tacy concentration
tacy_conc(data)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700))
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_",
Harvest = Harvest)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_")
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_") %>% colnames()
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = Harvest,
values_from = Diff,
names_prefix = "H_")
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_") %>%
mutate(
A = pH_1 - pH_4.5,
Concentration = round((A * 449.2 * 5 * 10^3) / (26900 * 1), digits = 3)
)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_") %>%
mutate(
A = pH_1 - pH_4.5,
Concentration = round((A * 449.2 * 5 * 10^3) / (26900 * 1), digits = 3)
) %>% ungroup() %>%
select(Sample_code, Rep, A, Concentration)
data %>%
mutate(Diff = as.numeric(nm_520) - as.numeric(nm_700)) %>%
dplyr::select(pH, Rep, Sample_code, Diff, Harvest) %>%
group_by(Sample_code, Rep, Harvest) %>%
pivot_wider(names_from = pH,
values_from = Diff,
names_prefix = "pH_") %>%
mutate(
A = pH_1 - pH_4.5,
Concentration = round((A * 449.2 * 5 * 10^3) / (26900 * 1), digits = 3)
) %>% ungroup()
# Load Tacy concentration function
source('tacy_conc.R')
# Calculate tacy concentration
tacy_conc(data)
# Calculate tacy concentration
conc_data <- tacy_conc(data)
View(conc_data)
usethis::use_r("titulo_de_un_script")
here::here('Tacy_Analysis.R')
here::here('..','Tacy_Analysis.R')
file.path('tacy_conc.R')
file.path('tacy_data.csv')
here::here('tacy_data.csv')
